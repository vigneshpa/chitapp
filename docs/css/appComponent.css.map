{"version":3,"file":"css/appComponent.css","mappings":"AAAA,yEAAyE,CACzE,oEAAoE,CACpE,6EAA6E,CCW3D,4HCEA,61BCAA,8XCQA,82CCCO,0pDCJP,0oBC6DhB,wCAAY,oBACW,CAGrB,YAFA,iBAAkB,CAClB,UACY,CACd,4CAME,uEAHA,qBAAsB,CAEtB,iBAAkB,CADlB,SAAU,CAHI,iBAKgD,CAChE,yDAC6B,oBACL,CACxB,oCACsB,GAKlB,QAAS,CAFT,SAAU,CAGV,UALC,QACQ,CAET,OAEU,CACZ,GAKE,WAAY,CAFZ,MAAS,CAGT,UALG,KACK,CAER,UAEU,CACZ","sources":["webpack:///appComponent.css","webpack:///./theme/Container.svelte","webpack:///./theme/Drawer.svelte","webpack:///./theme/IconText.svelte","webpack:///./theme/Nav.svelte","webpack:///./theme/TApp.svelte","webpack:///./theme/Prompt.svelte","webpack:///./src/App.svelte"],"sourcesContent":["@import url(https://fonts.googleapis.com/css2?family=Roboto&display=swap);\n@import url(https://fonts.googleapis.com/icon?family=Material+Icons);\n@import url(https://fonts.googleapis.com/icon?family=Material+Icons+Outlined);\n.t-container.svelte-gwlp1t{margin-top:55px;transition:margin 300ms ease}.t-container.shrinked.svelte-gwlp1t{margin-left:230px}\n\n.t-drawer.svelte-1g3bpye{position:fixed;top:55px;left:0px;bottom:0px;width:230px;box-sizing:border-box;background-color:white;box-shadow:0 0 3px grey;overflow:auto;padding:20px 0px 10px 0px;font-size:1.2rem;display:flex;flex-direction:column;flex-wrap:nowrap;justify-content:flex-start;transition:transform 300ms ease}.t-drawer.hidden.svelte-1g3bpye{transform:translateX(-102%)}.t-drawer.svelte-1g3bpye a{color:#292929;width:100%;box-sizing:border-box;text-decoration:none;padding:10px;transition:background-color 300ms ease, border 300ms ease}.t-drawer.svelte-1g3bpye a:hover{background-color:rgba(128, 128, 128, 0.2)}.t-drawer.svelte-1g3bpye a:active{background-color:rgba(128, 128, 128, 0.4)}.t-drawer.svelte-1g3bpye .linkactive{font-weight:bold;border-right:solid 0.3rem #6669d1}.drawer-cover.svelte-1g3bpye{position:fixed;top:55px;left:0;right:0;bottom:0;background-color:rgba(128, 128, 128, 0.5)}\n\n.t-icon-text-container.svelte-1xtqgot.svelte-1xtqgot{display:flex;align-items:center}.t-icon-text-container.svelte-1xtqgot .t-icon.svelte-1xtqgot{display:inline-block;width:24px;height:24px;color:#545454;margin-right:10px;margin-left:10px;overflow:hidden}.t-icon-text-container.svelte-1xtqgot .t-icon-text.svelte-1xtqgot{display:inline-block;text-decoration:none;padding-right:10px}\n\n.t-nav.svelte-14lek2.svelte-14lek2{padding:0px;position:fixed;top:0px;left:0px;right:0px;width:100%;box-sizing:border-box;background-color:#303fa1;display:flex;align-items:center;box-shadow:0px 0px 5px 0 0 3px grey;justify-content:space-between}.t-nav.svelte-14lek2 a,.t-nav.svelte-14lek2 span{line-height:18.3333333333px;font-size:1.5rem;padding:18.3333333333px 15px 18.3333333333px 15px;text-decoration:none;color:white;transition:background-color 300ms ease;user-select:none;cursor:pointer}.t-nav.svelte-14lek2 a:hover,.t-nav.svelte-14lek2 span:hover{background-color:rgba(128, 128, 128, 0.2)}.t-nav.svelte-14lek2 span{cursor:default}.t-nav.svelte-14lek2 span:hover{background-color:rgba(0, 0, 0, 0)}.t-nav.svelte-14lek2 .title{font-size:1rem}.t-nav-loading.svelte-14lek2.svelte-14lek2{position:fixed;width:100%;height:5px;top:55px;left:0px;right:0px;overflow-x:hidden}.t-nav-loading.svelte-14lek2 .line.svelte-14lek2{position:absolute;opacity:0.4;background:#303fa1;width:150%;height:5px}.t-nav-loading.svelte-14lek2 .subline.svelte-14lek2{position:absolute;background:#6669d1;height:5px}.t-nav-loading.svelte-14lek2 .inc.svelte-14lek2{animation:svelte-14lek2-increase 2s infinite}.t-nav-loading.svelte-14lek2 .dec.svelte-14lek2{animation:svelte-14lek2-decrease 2s 0.5s infinite}@keyframes svelte-14lek2-increase{from{left:-5%;width:5%}to{left:130%;width:100%}}@keyframes svelte-14lek2-decrease{from{left:-80%;width:80%}to{left:110%;width:10%}}\n\nbody{font-family:\"Roboto\", sans-serif;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;color:#292929;-webkit-tap-highlight-color:transparent}.t-a-btn{text-decoration:none;color:inherit;display:inline-block;padding:5px;transition:background-color 300ms ease}.t-a-btn:hover{background-color:rgba(128, 128, 128, 0.2);box-shadow:0px 0px 2px 0 0 3px grey}.t-btn{text-decoration:none;background-color:#303fa1;color:white;transition:background-color 300ms ease;border:none;box-shadow:0px 0px 0px 0 0 3px grey;border-radius:3px;font-size:1em;padding:0.7em}.t-btn.secondary{background-color:#3949ac;color:white}.t-btn:hover{background-color:#001870;box-shadow:0px 0px 2px 0 0 3px grey}.t-btn:active{background-color:#303fa1;box-shadow:0px 0px 2px 0 0 3px grey}.t-shadow{box-shadow:0px 0px 2px 0 0 3px grey;border-radius:3px}form label{display:block;margin-top:1.5em;padding:5px;font-size:1em}form label:first-of-type{margin-top:0}form input[type=text],form input[type=number],form textarea,form select{width:100%;padding:10px;box-sizing:border-box;font-size:1em;border:solid 1px grey;border-radius:5px;margin:0px;outline:none}form input[type=text]:focus,form input[type=number]:focus,form textarea:focus,form select:focus{box-shadow:0px 0px 2px grey}form input[type=text]:focus:invalid,form input[type=number]:focus:invalid,form textarea:focus:invalid,form select:focus:invalid{border:solid 1px #ad2f2f}form input[type=text]:focus:valid,form input[type=number]:focus:valid,form textarea:focus:valid,form select:focus:valid{border:solid 1px #4cad2f}form textarea{resize:none;height:10em}form input[type=submit]{display:block;text-align:center;margin:20px auto;cursor:pointer}form .message{color:#ac3535;padding:5px;font-size:0.8em}\n\n.t-prompt-cover.svelte-132nnn7.svelte-132nnn7{position:fixed;overflow:hidden;top:0px;right:0px;z-index:1;bottom:0px;left:0px;background-color:rgba(128, 128, 128, 0.5)}.t-prompt.svelte-132nnn7.svelte-132nnn7{position:absolute;top:50%;left:50%;transform:translate(-50%, -50%);z-index:2;margin:Auto;padding:1em;border-radius:10px;box-shadow:0 0 3px grey;background-color:white;text-align:center}.t-prompt.svelte-132nnn7>div{min-width:300px;min-height:70px}.t-prompt.svelte-132nnn7 .t-prompt-buttons.svelte-132nnn7{display:flex;min-height:unset;align-items:center;justify-content:space-evenly}.t-prompt.svelte-132nnn7 .t-prompt-buttons.svelte-132nnn7 button{margin:0 1em}\n\n.lds-ripple.svelte-c5gwr1.svelte-c5gwr1{display:inline-block;position:relative;width:48px;height:48px}.lds-ripple.svelte-c5gwr1 div.svelte-c5gwr1{position:absolute;border:4px solid #fff;opacity:1;border-radius:50%;animation:svelte-c5gwr1-lds-ripple 1s cubic-bezier(0, 0.2, 0.8, 1) infinite}.lds-ripple.svelte-c5gwr1 div.svelte-c5gwr1:nth-child(2){animation-delay:-0.5s}@keyframes svelte-c5gwr1-lds-ripple{0%{top:20px;left:20px;width:0;height:0;opacity:1}100%{top:0px;left:0px;width:40px;height:40px;opacity:0}}\n\n","<script lang=\"ts\">\n  import getStore from './TStore';\n  const store = getStore();\n  const store_drawer = store.drawer;\n  const store_mobile = store.mobile;\n</script>\n\n<template>\n  <div class=\"t-container\" class:shrinked={$store_drawer && !$store_mobile}>\n    <slot />\n  </div>\n</template>\n\n<style lang=\"scss\">\n  @use \"./scheme.scss\" as scheme;\n  .t-container {\n    margin-top: scheme.$navSize;\n    transition: margin scheme.$aniDuration ease;\n    &.shrinked {\n      margin-left: scheme.$drawerWidth;\n    }\n  }\n</style>\n","<script lang=\"ts\">\n  import { fade } from 'svelte/transition';\n  import getStore from './TStore';\n  const store = getStore();\n  let store_drawer = store.drawer;\n  let store_mobile = store.mobile;\n</script>\n\n<template>\n  {#if $store_mobile && $store_drawer}\n    <div class=\"drawer-cover\" transition:fade on:click={() => store_drawer.set(false)} />\n  {/if}\n  <div class=\"t-drawer\" class:hidden={!$store_drawer}><slot /></div>\n</template>\n\n<style lang=\"scss\">\n  @use \"./scheme.scss\" as scheme;\n  .t-drawer {\n    position: fixed;\n    top: scheme.$navSize;\n    left: 0px;\n    bottom: 0px;\n    width: scheme.$drawerWidth;\n    box-sizing: border-box;\n    background-color: scheme.$background;\n    box-shadow: scheme.$shadow;\n    overflow: auto;\n    padding: 20px 0px 10px 0px;\n\n    font-size: 1.2rem;\n\n    display: flex;\n    flex-direction: column;\n    flex-wrap: nowrap;\n    justify-content: flex-start;\n\n    transition: transform scheme.$aniDuration ease;\n    &.hidden {\n      transform: translateX(-102%);\n    }\n    :global {\n      a {\n        color: scheme.$textOnBackground;\n        width: 100%;\n        box-sizing: border-box;\n        text-decoration: none;\n        padding: 10px;\n        transition: background-color scheme.$aniDuration ease, border scheme.$aniDuration ease;\n\n        &:hover {\n          background-color: scheme.$highlight;\n        }\n        &:active {\n          background-color: scheme.$highlightDark;\n        }\n      }\n      .linkactive {\n        font-weight: bold;\n        border-right: solid 0.3rem scheme.$primaryLight;\n      }\n    }\n  }\n  .drawer-cover {\n    position: fixed;\n    top: scheme.$navSize;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-color: scheme.$coverColor;\n  }\n</style>\n","<script lang=\"ts\">\n  export let icon: string;\n  export let outlined: boolean = false;\n  export let justifyContent: 'left' | 'right' | 'center' = 'center';\n</script>\n\n<template>\n  <div class=\"t-icon-text-container\" style=\"justify-content:{justifyContent}\">\n    <i class=\"t-icon\" class:material-icons={!outlined} class:material-icons-outlined={outlined}> {icon} </i>\n    <span class=\"t-icon-text\">\n      <slot />\n    </span>\n  </div>\n</template>\n\n<style lang=\"scss\">\n  @use \"./scheme.scss\" as scheme;\n  .t-icon-text-container {\n    .t-icon {\n      display: inline-block;\n      width: 24px;\n      height: 24px;\n      color: scheme.$textOnBackgroundLight;\n      margin-right: 10px;\n      margin-left: 10px;\n      overflow: hidden;\n    }\n    .t-icon-text {\n      display: inline-block;\n      text-decoration: none;\n      padding-right: 10px;\n    }\n    display: flex;\n    align-items: center;\n  }\n</style>\n","<script lang=\"ts\">\n  import { slide as trans } from 'svelte/transition';\n  import getStore from './TStore';\n  const store = getStore();\n  let store_drawer = store.drawer;\n  export let loading: boolean = true;\n</script>\n\n<template>\n  {#if loading}\n    <div class=\"t-nav-loading\" transition:trans>\n      <div class=\"line\" />\n      <div class=\"subline inc\" />\n      <div class=\"subline dec\" />\n    </div>\n  {/if}\n  <div class=\"t-nav\">\n    <!-- svelte-ignore a11y-missing-attribute -->\n    <a on:click={() => store_drawer.set(!$store_drawer)} class=\"material-icons\" style=\"font-size:24px;\">menu</a>\n    <slot />\n  </div>\n</template>\n\n<style lang=\"scss\">\n  @use \"./scheme.scss\" as scheme;\n  .t-nav {\n    padding: 0px;\n    position: fixed;\n    top: 0px;\n    left: 0px;\n    right: 0px;\n    width: 100%;\n    box-sizing: border-box;\n    background-color: scheme.$primary;\n    display: flex;\n    align-items: center;\n    box-shadow: 0px 0px 5px scheme.$shadowColor;\n    justify-content: space-between;\n    :global {\n      a,\n      span {\n        line-height: scheme.$nav1in3;\n        font-size: 1.5rem;\n        padding: scheme.$nav1in3 15px scheme.$nav1in3 15px;\n        text-decoration: none;\n        color: scheme.$textOnPrimary;\n        transition: background-color scheme.$aniDuration ease;\n        user-select: none;\n        cursor: pointer;\n        &:hover {\n          background-color: scheme.$highlight;\n        }\n      }\n      span {\n        cursor: default;\n        &:hover {\n          background-color: rgba(0, 0, 0, 0);\n        }\n      }\n      .title {\n        font-size: 1rem;\n      }\n    }\n  }\n  .t-nav-loading {\n    position: fixed;\n    width: 100%;\n    height: 5px;\n    top: scheme.$navSize;\n    left: 0px;\n    right: 0px;\n    overflow-x: hidden;\n\n    .line {\n      position: absolute;\n      opacity: 0.4;\n      background: scheme.$primary;\n      width: 150%;\n      height: 5px;\n    }\n\n    .subline {\n      position: absolute;\n      background: scheme.$primaryLight;\n      height: 5px;\n    }\n    .inc {\n      animation: increase 2s infinite;\n    }\n    .dec {\n      animation: decrease 2s 0.5s infinite;\n    }\n\n    @keyframes increase {\n      from {\n        left: -5%;\n        width: 5%;\n      }\n      to {\n        left: 130%;\n        width: 100%;\n      }\n    }\n    @keyframes decrease {\n      from {\n        left: -80%;\n        width: 80%;\n      }\n      to {\n        left: 110%;\n        width: 10%;\n      }\n    }\n  }\n</style>\n","<script lang=\"ts\">\n  import { setContext } from 'svelte';\n  import type { TStore } from './TStore';\n  import { Writable, writable } from 'svelte/store';\n  let store: TStore = {\n    mobile: writable(true) as Writable<boolean>,\n    drawer: writable(false) as Writable<boolean>,\n  };\n  const resizeHandler = () => {\n    const isMobile = window.innerWidth < 960;\n    store.mobile.set(isMobile);\n    store.drawer.set(!isMobile);\n  };\n  window.addEventListener('resize', resizeHandler);\n  resizeHandler();\n  setContext('ttheme-store', store);\n</script>\n\n<template>\n  <div class=\"t-app\">\n    <slot />\n  </div>\n</template>\n\n<style lang=\"scss\" global>\n  @use \"./scheme.scss\" as scheme;\n  @import url(https://fonts.googleapis.com/css2?family=Roboto&display=swap);\n  @import url(https://fonts.googleapis.com/icon?family=Material+Icons);\n  @import url(https://fonts.googleapis.com/icon?family=Material+Icons+Outlined);\n  body {\n    font-family: 'Roboto', sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    color: scheme.$textOnBackground;\n    -webkit-tap-highlight-color: transparent;\n  }\n  .t-a-btn {\n    text-decoration: none;\n    color: inherit;\n    display: inline-block;\n    padding: 5px;\n    transition: background-color scheme.$aniDuration ease;\n    &:hover {\n      background-color: scheme.$highlight;\n      box-shadow: 0px 0px 2px scheme.$shadowColor;\n    }\n  }\n  .t-btn {\n    text-decoration: none;\n    background-color: scheme.$primary;\n    color: scheme.$textOnPrimary;\n    &.secondary {\n      background-color: scheme.$secondary;\n      color: scheme.$textOnSecondary;\n    }\n    transition: background-color scheme.$aniDuration ease;\n    border: none;\n    box-shadow: 0px 0px 0px scheme.$shadowColor;\n    border-radius: 3px;\n    font-size: 1em;\n    padding: 0.7em;\n    &:hover {\n      background-color: scheme.$primaryDark;\n      box-shadow: 0px 0px 2px scheme.$shadowColor;\n    }\n    &:active {\n      background-color: scheme.$primary;\n      box-shadow: 0px 0px 2px scheme.$shadowColor;\n    }\n  }\n  .t-shadow {\n    box-shadow: 0px 0px 2px scheme.$shadowColor;\n    border-radius: 3px;\n  }\n  form {\n    label {\n      display: block;\n      margin-top: 1.5em;\n      padding: 5px;\n      font-size: 1em;\n      &:first-of-type {\n        margin-top: 0;\n      }\n    }\n    input[type='text'],\n    input[type='number'],\n    textarea,\n    select {\n      width: 100%;\n      padding: 10px;\n      box-sizing: border-box;\n      font-size: 1em;\n      border: solid 1px grey;\n      border-radius: 5px;\n      margin: 0px;\n      outline: none;\n      &:focus {\n        box-shadow: 0px 0px 2px grey;\n        &:invalid {\n          border: solid 1px rgb(173, 47, 47);\n        }\n        &:valid {\n          border: solid 1px rgb(76, 173, 47);\n        }\n      }\n    }\n    textarea {\n      resize: none;\n      height: 10em;\n    }\n    input[type='submit'] {\n      display: block;\n      text-align: center;\n      margin: 20px auto;\n      cursor: pointer;\n    }\n    .message {\n      color: rgb(172, 53, 53);\n      padding: 5px;\n      font-size: 0.8em;\n    }\n  }\n</style>\n","<script lang=\"ts\">\n  import { fade as trans } from 'svelte/transition';\n  export let preClose: () => Promise<boolean | void> | boolean | void = () => Promise.resolve(false);\n  export let show: boolean = true;\n</script>\n\n<template>\n  {#if show}\n    <div class=\"t-prompt\">\n      <slot />\n      <div class=\"t-prompt-buttons\"><slot name=\"buttons\" /></div>\n    </div>\n    <div\n      class=\"t-prompt-cover\"\n      on:click={() => Promise.resolve(preClose()).then(val => !(show = typeof val === 'boolean' && val))}\n      transition:trans\n    />\n  {/if}\n</template>\n\n<style lang=\"scss\">\n  @use \"./scheme.scss\" as scheme;\n  .t-prompt-cover {\n    position: fixed;\n    overflow: hidden;\n    top: 0px;\n    right: 0px;\n    z-index: 1;\n    bottom: 0px;\n    left: 0px;\n    background-color: scheme.$coverColor;\n  }\n  .t-prompt {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    z-index: 2;\n    margin: Auto;\n    padding: 1em;\n    border-radius: 10px;\n    box-shadow: scheme.$shadow;\n    background-color: scheme.$background;\n    text-align: center;\n    > :global(div) {\n      min-width: 300px;\n      min-height: 70px;\n    }\n    .t-prompt-buttons {\n      display: flex;\n      min-height: unset;\n      align-items: center;\n      justify-content: space-evenly;\n      :global(button) {\n        margin: 0 1em;\n      }\n    }\n  }\n</style>\n","<script lang=\"ts\">\n  import Container from '@theme/Container.svelte';\n  import Drawer from '@theme/Drawer.svelte';\n  import IconText from '@theme/IconText.svelte';\n  import Nav from '@theme/Nav.svelte';\n  import TApp from '@theme/TApp.svelte';\n  import { Router } from '@vigneshpa/svelte-router';\n  import routes from '@/routes/';\n  import Prompt from '@theme/Prompt.svelte';\n  const bURL = window.bURL;\n  let route_loading = window['svelte-router'].isLoading;\n  let drawer_links = [\n    { href: bURL + '/dashboard', text: 'Dashboard', icon: 'space_dashboard', icon_noutlined: false },\n    { href: bURL + '/clients', text: 'Clients', icon: 'people' },\n    { href: bURL + '/groups', text: 'Groups', icon: 'groups' },\n    { href: bURL + '/backup', text: 'Backup', icon: 'settings_backup_restore' },\n    { href: bURL + '/about', text: 'About', icon: 'info' },\n  ];\n  let route_pageStr = window['svelte-router'].pageStr;\n  const serviceWorkerStatus = window.serviceWorkerStatus;\n  let installEvent: Event | null = null;\n  const install = () => {\n    (installEvent as any).prompt();\n    installEvent = null;\n  };\n  window.addEventListener('beforeinstallprompt', e => {\n    e.preventDefault();\n    installEvent = e;\n  });\n  let prompt = true;\n</script>\n\n<template>\n  <TApp>\n    <Container>\n      <Router base={bURL} {...routes} />\n    </Container>\n\n    <Drawer>\n      {#each drawer_links as lnk}\n        <a href={lnk.href} class:linkactive={(bURL + $route_pageStr).startsWith(lnk.href)}>\n          <IconText icon={lnk.icon} outlined={!lnk.icon_noutlined}>{lnk.text}</IconText>\n        </a>\n      {/each}\n    </Drawer>\n\n    <Nav loading={$route_loading}>\n      <span class=\"title\"> Chit Management System</span>\n      {#if !window.useLocalCore}\n        <a href=\"/api/logout\"> Logout </a>\n      {:else if serviceWorkerStatus}\n        {#if $serviceWorkerStatus === 'preparing'}\n          <span class=\"material-icons\" title=\"Downloading service worker.\">downloading</span>\n        {:else if $serviceWorkerStatus === 'downloading'}\n          <div class=\"lds-ripple\" title=\"A new version of app is being downloaded by the service worker.\">\n            <div />\n            <div />\n          </div>\n        {:else if $serviceWorkerStatus === 'ready'}\n          <span class=\"material-icons\" title=\"Service worker is ready and the app is available offline\">offline_pin</span>\n        {:else if $serviceWorkerStatus === 'refresh'}\n          <span class=\"material-icons\" title=\"A new version of the app is downloaded and requires restart\">restart_alt</span>\n        {:else if $serviceWorkerStatus === 'offline'}\n          <span class=\"material-icons\" title=\"No internet connection\">wifi_off</span>\n        {/if}\n      {/if}\n    </Nav>\n\n    <Prompt show={!!installEvent}>\n      <div>\n        <p>Chit App can now work offline.<br />Do you want to install?</p>\n      </div>\n      <svelte:fragment slot=\"buttons\">\n        <button class=\"t-btn secondary\" on:click={() => (installEvent = null)}>Cancel</button>\n        <button class=\"t-btn\" on:click={install}>Install</button>\n      </svelte:fragment>\n    </Prompt>\n  </TApp>\n</template>\n\n<style>\n  .lds-ripple {\n    display: inline-block;\n    position: relative;\n    width: 48px;\n    height: 48px;\n  }\n  .lds-ripple div {\n    position: absolute;\n    border: 4px solid #fff;\n    opacity: 1;\n    border-radius: 50%;\n    animation: lds-ripple 1s cubic-bezier(0, 0.2, 0.8, 1) infinite;\n  }\n  .lds-ripple div:nth-child(2) {\n    animation-delay: -0.5s;\n  }\n  @keyframes lds-ripple {\n    0% {\n      top: 20px;\n      left: 20px;\n      width: 0;\n      height: 0;\n      opacity: 1;\n    }\n    100% {\n      top: 0px;\n      left: 0px;\n      width: 40px;\n      height: 40px;\n      opacity: 0;\n    }\n  }\n</style>\n"],"names":[],"sourceRoot":""}