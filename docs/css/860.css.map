{"version":3,"file":"css/860.css","mappings":"AAMyB,uRCuBP,myBCVA,qVC4BA","sources":["webpack:///./theme/Grid.svelte","webpack:///./theme/Page.svelte","webpack:///./theme/Dialouge.svelte","webpack:///./src/routes/Clients/Clients.svelte"],"sourcesContent":["<template>\n  <div class=\"t-grid\">\n    <slot />\n  </div>\n</template>\n\n<style lang=\"scss\" global>\n  @use './scheme.scss' as scheme;\n  .t-grid {\n    display: grid;\n    grid-template-columns: auto auto auto;\n    > div {\n      box-shadow: 0px 0px 2px scheme.$shadowColor;\n      padding: 10px;\n      margin: 10px;\n      // border-radius:5px;\n    }\n  }\n  @media only screen and (max-width: 1080px + scheme.$drawerWidth) {\n    .t-grid {\n      grid-template-columns: auto auto;\n    }\n  }\n  @media only screen and (max-width: 720px) {\n    .t-grid {\n      grid-template-columns: auto;\n    }\n  }\n</style>\n","<script lang=\"ts\">\n  import { slide as trns } from 'svelte/transition';\n  import getStore from './TStore';\n  const store = getStore();\n  let store_mobile = store.mobile;\n  store.drawer.set(!$store_mobile);\n  export let backButton: boolean = false;\n  export let heading: string;\n  document.body.scrollTop = 0;\n  document.documentElement.scrollTop = 0;\n</script>\n\n<template>\n  <div class=\"page\" transition:trns>\n    <div class=\"top\">\n      {#if backButton}\n        <!-- svelte-ignore a11y-invalid-attribute -->\n        <a href=\"javascript:history.back()\" class=\"t-a-btn\"><span class=\"material-icons\">arrow_back</span></a>\n      {/if}\n      <div class=\"heading\">{heading}</div>\n      <slot name=\"top-extra\" />\n    </div>\n\n    <div class=\"content\">\n      <slot />\n    </div>\n  </div>\n</template>\n\n<style lang=\"scss\">\n  @import './scheme.scss';\n  .page {\n    margin: 0px;\n    padding: 10px;\n    transition: padding $aniDuration ease;\n    @media only screen and (max-width: 720px) {\n      padding: 10px 5px;\n    }\n    .top {\n      color: $textOnBackground;\n      .t-a-btn {\n        height: 34px;\n        display: inline-block;\n        box-sizing: border-box;\n        border-radius: 17px;\n        width: 34px;\n      }\n      .heading {\n        font-size: 1.5em;\n      }\n      border-bottom: solid 2px $textOnBackground;\n      padding: 10px;\n      display: flex;\n      flex-flow: row nowrap;\n      align-items: center;\n      justify-content: space-between;\n      div {\n        display: inline-block;\n      }\n    }\n    .content {\n      padding: 10px;\n      transition: padding $aniDuration ease;\n      @media only screen and (max-width: 720px) {\n        padding: 10px 0px;\n      }\n    }\n  }\n</style>\n","<script lang=\"ts\">\n  import { fade as trans } from 'svelte/transition';\n  export let preClose: () => Promise<boolean | void> | boolean | void = () => Promise.resolve(false);\n  export let show: boolean = true;\n</script>\n\n<template>\n  {#if show}\n    <div class=\"t-dialouge\">\n      <slot />\n    </div>\n    <div\n      class=\"t-dialouge-cover\"\n      on:click={() => Promise.resolve(preClose()).then(val => (show = !(typeof val === 'boolean' && val)))}\n      transition:trans\n    />\n  {/if}\n</template>\n\n<style lang=\"scss\">\n  @use \"./scheme.scss\" as scheme;\n  .t-dialouge-cover {\n    position: fixed;\n    overflow: auto;\n    top: 0px;\n    right: 0px;\n    z-index: 1;\n    bottom: 0px;\n    left: 0px;\n    background-color: scheme.$coverColor;\n  }\n  .t-dialouge {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    z-index: 2;\n    margin: Auto;\n    > :global(div) {\n      border-bottom-left-radius: 10px;\n      border-bottom-right-radius: 10px;\n      background-color: scheme.$background;\n    }\n  }\n</style>\n","<script lang=\"ts\">\n  import Grid from '@theme/Grid.svelte';\n  import Page from '@theme/Page.svelte';\n  import IconText from '@theme/IconText.svelte';\n  import Dialouge from '@theme/Dialouge.svelte';\n\n  import { action } from '@/api';\n  import { slide as trns } from 'svelte/transition';\n  import { Router } from '@vigneshpa/svelte-router';\n  import type { Writable } from 'svelte/store';\n\n  export let hasChildRouteComp: Writable<boolean>;\n\n  let clients: any[] = [];\n  $: !$hasChildRouteComp && action('findClients').then(val => (clients = val));\n</script>\n\n<template>\n  <Page heading=\"Clients\">\n    <div slot=\"top-extra\">\n      <a href=\"clients/add\" class=\"t-a-btn\" title=\"Create new Client\"><IconText icon=\"add\">Add</IconText></a>\n    </div>\n    <Grid>\n      {#each clients as client}\n        <div class=\"client\" transition:trns>\n          <div class=\"name\" on:click={() => window['svelte-router'].router?.route('/clients/info/' + client.uuid)}>\n            <IconText icon=\"person\">{client.name}</IconText>\n          </div>\n          <div class=\"details\">\n            <div class=\"phone\">{client.phone}</div>\n            <div class=\"address\">\n              {#each client.address.split('\\n') as level}\n                {level}<br />\n              {/each}\n            </div>\n          </div>\n        </div>\n      {/each}\n    </Grid>\n  </Page>\n  {#if $hasChildRouteComp}\n    <Dialouge preClose={() => window['svelte-router'].router?.route('/clients')}>\n      <Router />\n    </Dialouge>\n  {/if}\n</template>\n\n<style lang=\"scss\">\n  .client {\n    padding: 10px;\n    margin: 10px;\n    text-align: center;\n    .name {\n      font-size: 1.2em;\n      padding: 5px;\n      margin: 5px;\n      font-weight: 600;\n      border-bottom: solid 1px black;\n    }\n    div {\n      padding: 5px;\n      margin-top: 5px;\n    }\n  }\n</style>\n"],"names":[],"sourceRoot":""}