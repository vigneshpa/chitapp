{"version":3,"file":"js/933.js","mappings":"sRA2DqE,EAAK,M,4DAA/C,EAAK,IAAG,E,+BAAa,EAAQ,KAAK,EAAK,K,QAAtD,SAAuE,Q,kHAUlC,EAAY,K,uCAAnD,SAAyD,Q,mDAAlB,EAAY,K,qOAX5C,EAAM,G,qBAAX,OAAI,K,uBAUH,EAAY,S,qzBAXkC,IAAL,EAAK,oC,0eANvD,SAuBS,QAtBP,SAqBM,MApBJ,SAA6B,M,eAC7B,SAAkI,M,WAArF,EAAI,K,eAEjD,SAA+B,M,eAC/B,SAIQ,K,uDAJsC,EAAK,K,eAMnD,SAAoC,M,eACpC,SAAoG,M,WAAzC,EAAU,K,eAErE,SAA+B,M,eAC/B,SAAyH,K,uDAKzH,SAAmD,K,oEAlBU,EAAgB,K,+CAGd,EAAgB,K,8CAU4B,EAAW,K,2CAbzE,EAAI,K,WAAJ,EAAI,I,mBAIxC,EAAM,G,QAAX,OAAI,M,gHAAJ,O,kBAD0C,EAAK,I,0BAOQ,EAAU,K,WAAV,EAAU,IAIhE,EAAY,G,6TAnBsD,U,kPAAhEA,OAAOC,KAAO,Y,uEADzB,SAEK,QADH,SAA4F,M,qmBAxC1FC,EAAM,IAAIC,KACVC,EAAWF,EAAIG,WACfC,EAAUJ,EAAIK,c,IAEhBC,EACAC,EAGAC,EAFAC,EAAgBP,EAAW,EAC3BQ,EAAeN,EAEfO,EAAqB,KAEzB,SAAQ,IACNL,EAAKM,iBAAiB,UAAUC,IAC9BA,EAAGC,kBACH,QAAO,cAAe,CAAEJ,KAAAA,EAAMD,MAAAA,EAAOD,MAAAA,EAAOG,WAAAA,IAAcI,MAAKC,I,MACxDA,EAAIC,MACPC,MAAM,qBAEsB,QAA9B,EAAApB,OAAO,iBAAiBqB,cAAM,SAAEC,MAAM,mB,IAKxCC,EAAe,G,MAMbC,GAAmB,Q,YAJvB,QAAO,aAAc,CACnBC,KAAMb,EAAO,IAAMD,EAAQ,IAAMD,IAChCO,MAAKC,GAAOT,EAAWiB,kBAAkB,EAAD,EAAEH,EAAeL,EAAM,uBAAyB,U,mBA5B9E,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,Y,eAgC5HS,KAAKC,MAAQD,KAAKC,MAAMC,cAAcC,QAAQ,WAAY,IAC1DpB,EAAQiB,KAAKC,MACbJ,EAAiBO,KAAKJ,KAAtBH,I,WAYiDZ,GAAI,qB,mBAGHD,GAAK,e,mBAOQE,GAAU,qB,oDAGnDJ,EAAU,E,uDAfbD,EAAI,E,2ZCnCnB,SAA8G,Q,+DAF3G,EAAU,Q,mMAIO,EAAO,I,uPANjC,SAaK,QAZH,SAOK,K,+BAFH,SAAmC,M,4DAIrC,SAEK,K,8BAVE,EAAU,G,oEAIO,EAAO,I,geAhB3BwB,GAAQ,S,IACVC,EAAeD,EAAME,Q,4BACzBF,EAAMG,OAAOC,KAAKC,G,eACPC,GAAsB,GAAK,G,QAC3BC,GAAe,E,OAC1BC,SAASC,KAAKC,UAAY,EAC1BF,SAASG,gBAAgBD,UAAY,E,2PCThC,SAASE,EACdC,EACAC,EAAgB,KAEhB,IAAIC,EACJ,OAAO,YAA4BC,GACjC,MAAMC,EAAUtB,KAChBuB,aAAaH,GACbA,EAAgBI,YAAW,IAAMN,EAAKO,MAAMH,EAASD,IAAOF,I","sources":["webpack:///./src/routes/Groups/Add.svelte","webpack:///./theme/Page.svelte","webpack:///./src/utils.ts"],"sourcesContent":["<script lang=\"ts\">\n  import Page from '@theme/Page.svelte';\n  import IconText from '@theme/IconText.svelte';\n  import { action } from '@/coreService';\n  import { debounce } from '@/utils';\n  import { onMount } from 'svelte';\n  import { slide } from 'svelte/transition';\n\n  const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n  const now = new Date();\n  const nowMonth = now.getMonth();\n  const nowYear = now.getFullYear();\n\n  let form: HTMLFormElement;\n  let batchInput: HTMLInputElement;\n  let month: number = nowMonth + 1;\n  let year: number = nowYear;\n  let batch: string;\n  let totalValue: number = 2000000;\n\n  onMount(() =>\n    form.addEventListener('submit', ev => {\n      ev.preventDefault();\n      action('createGroup', { year, month, batch, totalValue }).then(val => {\n        if (!val.uuid) {\n          alert('Group not created');\n        }\n        window['svelte-router'].router?.route('/groups');\n      });\n    })\n  );\n\n  let batchMessage = '';\n  function validateBatch() {\n    action('checkGroup', {\n      name: year + '-' + month + '-' + batch,\n    }).then(val => batchInput.setCustomValidity((batchMessage = val ? 'Batch already exists' : '')));\n  }\n  const validateBatchDeb = debounce(validateBatch);\n  function batchChange(this: HTMLInputElement) {\n    this.value = this.value.toUpperCase().replace(/[^A-Z:]/g, '');\n    batch = this.value;\n    validateBatchDeb.bind(this)();\n  }\n</script>\n\n<template>\n  <Page heading=\"Create a new Group\" backButton>\n    <div slot=\"top-extra\">\n      <a href={window.bURL + '/groups'} class=\"t-a-btn\"><IconText icon=\"close\">Close</IconText></a>\n    </div>\n    <section class=\"t-shadow\">\n      <form bind:this={form}>\n        <label for=\"year\">Year</label>\n        <input name=\"year\" type=\"number\" bind:value={year} on:input={validateBatchDeb} autocomplete=\"off\" min=\"2000\" max=\"3000\" required />\n\n        <label for=\"month\">Month</label>\n        <select name=\"month\" type=\"month\" bind:value={month} on:input={validateBatchDeb} autocomplete=\"off\" required>\n          {#each months as month, index}\n            <option value={index + 1} selected={nowMonth === index}>{month}</option>\n          {/each}\n        </select>\n\n        <label for=\"totalValue\">Value</label>\n        <input name=\"totalVaue\" type=\"number\" min=\"20\" bind:value={totalValue} autocomplete=\"off\" required />\n\n        <label for=\"batch\">Batch</label>\n        <input bind:this={batchInput} name=\"batch\" type=\"text\" autocomplete=\"off\" required maxlength=\"3\" on:input={batchChange} />\n        {#if batchMessage}\n          <div class=\"message\" transition:slide>{batchMessage}</div>\n        {/if}\n\n        <input type=\"submit\" value=\"Submit\" class=\"t-btn\" />\n      </form>\n    </section>\n  </Page>\n</template>\n\n<style lang=\"scss\">\n  section {\n    padding: 10px;\n    margin: 10px auto;\n    max-width: 600px;\n    overflow: hidden;\n    form {\n      max-width: 500px;\n      margin: 25px auto;\n    }\n  }\n</style>\n","<script lang=\"ts\">\n  import { slide as trns } from 'svelte/transition';\n  import getStore from './TStore';\n  const store = getStore();\n  let store_mobile = store.mobile;\n  store.drawer.set(!$store_mobile);\n  export let backButton: boolean = false;\n  export let heading: string;\n  document.body.scrollTop = 0;\n  document.documentElement.scrollTop = 0;\n</script>\n\n<template>\n  <div class=\"page\" transition:trns>\n    <div class=\"top\">\n      {#if backButton}\n        <!-- svelte-ignore a11y-invalid-attribute -->\n        <a href=\"javascript:history.back()\" class=\"t-a-btn\"><span class=\"material-icons-outlined\">arrow_back</span></a>\n      {/if}\n      <div class=\"heading\">{heading}</div>\n      <slot name=\"top-extra\" />\n    </div>\n\n    <div class=\"content\">\n      <slot />\n    </div>\n  </div>\n</template>\n\n<style lang=\"scss\">\n  @import './scheme.scss';\n  .page {\n    margin: 0px;\n    padding: 10px;\n    transition: padding $aniDuration ease;\n    @media only screen and (max-width: 720px) {\n      padding: 10px 5px;\n    }\n    .top {\n      color: $textOnBackground;\n      .t-a-btn {\n        height: 34px;\n        display: inline-block;\n        box-sizing: border-box;\n        border-radius: 17px;\n        width: 34px;\n      }\n      .heading {\n        font-size: 1.5em;\n      }\n      border-bottom: solid 2px $textOnBackground;\n      padding: 10px;\n      display: flex;\n      flex-flow: row nowrap;\n      align-items: center;\n      justify-content: space-between;\n      div {\n        display: inline-block;\n      }\n    }\n    .content {\n      padding: 10px;\n      transition: padding $aniDuration ease;\n      @media only screen and (max-width: 720px) {\n        padding: 10px 0px;\n      }\n    }\n  }\n</style>\n","export function debounce<Params extends any[], Context extends any>(\n  func: (this: Context, ...args: Params) => any,\n  delay: number = 700\n): (this: Context, ...args: Params) => void {\n  let debounceTimer: any;\n  return function (this: Context, ...args: Params) {\n    const context = this;\n    clearTimeout(debounceTimer);\n    debounceTimer = setTimeout(() => func.apply(context, args), delay);\n  };\n}\n"],"names":["window","bURL","now","Date","nowMonth","getMonth","nowYear","getFullYear","form","batchInput","batch","month","year","totalValue","addEventListener","ev","preventDefault","then","val","uuid","alert","router","route","batchMessage","validateBatchDeb","name","setCustomValidity","this","value","toUpperCase","replace","bind","store","store_mobile","mobile","drawer","set","$store_mobile","backButton","heading","document","body","scrollTop","documentElement","debounce","func","delay","debounceTimer","args","context","clearTimeout","setTimeout","apply"],"sourceRoot":""}