{"version":3,"file":"js/appComponent.js","mappings":"8TAQ2C,EAAa,KAAK,EAAa,K,QAAxE,SAEK,O,oJAFoC,EAAa,KAAK,EAAa,K,oJANlEA,GAAQ,SACRC,EAAeD,EAAME,Q,kCACrBC,EAAeH,EAAMI,O,uTCMzB,SAAoF,O,0PADjF,EAAa,IAAI,EAAa,S,kLAGE,EAAa,K,qCAAlD,SAAiE,O,8BAH5D,EAAa,IAAI,EAAa,G,mQAGE,EAAa,K,uMAT5CJ,GAAQ,S,IACVC,EAAeD,EAAME,Q,gCACrBC,EAAeH,EAAMI,O,iGAKmCH,EAAaI,KAAI,I,2XCA3E,SAIK,O,2MALF,EAAO,Q,0TAOZ,SAIK,QAFH,SAA2G,M,kFATxG,EAAO,G,oaALRJ,GADU,SACWC,Q,wCACdI,GAAmB,GAAI,E,mGAabL,EAAaI,KAAKE,I,0QCCvC,SAEK,O,iQAjBDP,EAAK,CACPI,QAAQ,SAAS,GACjBF,QAAQ,SAAS,I,MAEbM,EAAgB,K,MACdC,EAAWC,OAAOC,WAAa,IACrCX,EAAMI,OAAOC,IAAII,GACjBT,EAAME,OAAOG,KAAKI,I,OAEpBC,OAAOE,iBAAiB,SAAUJ,GAClCA,KACA,OAAW,eAAgBR,G,uJCb7B,MAmBA,GAAiBa,KAnBgB,CAC/BC,UAAW,CAAEC,UAAW,IAAM,+BAC9BC,QAAS,CACPD,UAAW,IAAM,8BACjBE,OAAQ,CACNC,IAAK,CAAEH,UAAW,IAAM,+BACxB,eAAgB,CAAEA,UAAW,IAAM,iCAGvCI,MAAO,CAAEJ,UAAW,IAAM,+BAC1BK,OAAQ,CACNL,UAAW,IAAM,8BACjBE,OAAQ,CACNC,IAAK,CAAEH,UAAW,IAAM,iCAG5BM,OAAQ,CAAEN,UAAW,IAAM,gCAGNO,WADoBC,GAAUA,EAAOC,GAAG,KAAK,IAAMD,EAAOE,MAAM,iB,4FCGnE,EAAI,IAAMR,G,6LAAV,EAAI,I,eAAMA,K,0IAMsC,EAAG,GAACS,KAAI,G,6IAAlD,EAAG,GAACC,K,UAAiB,EAAG,GAACC,e,2HADlC,EAAG,GAACC,O,yBAAyB,EAAI,GAAG,EAAc,IAAEC,WAAW,EAAG,GAACD,Q,QAA5E,SAEG,Q,uIAFmC,EAAI,GAAG,EAAc,IAAEC,WAAW,EAAG,GAACD,Q,4IADvE,EAAY,G,qBAAjB,OAAI,K,mOAAC,EAAY,G,QAAjB,OAAI,M,sIAAJ,OAAI,gB,+CAAJ,OAAI,M,iKASAnB,OAAOqB,c,gHACX,SAAiC,Q,uBADV,G,oHADzB,SAAmC,Q,sSADvB,EAAc,G,0YAAd,EAAc,I,upBA1BxBC,EAAOtB,OAAOsB,K,IAChBC,EAAgBvB,OAAO,iBAAiBwB,W,gCACxCC,EAAe,C,CACfN,KAAMG,EAAO,aAAcN,KAAM,YAAaC,KAAM,kBAAmBC,gBAAgB,G,CACvFC,KAAMG,EAAO,WAAYN,KAAM,UAAWC,KAAM,U,CAChDE,KAAMG,EAAO,UAAWN,KAAM,SAAUC,KAAM,U,CAC9CE,KAAMG,EAAO,UAAWN,KAAM,SAAUC,KAAM,2B,CAC9CE,KAAMG,EAAO,SAAUN,KAAM,QAASC,KAAM,SAE5CS,EAAgB1B,OAAO,iBAAiB2B,Q,+TCToD,EAAI,I,sHAAzD,EAAQ,K,qCAAiC,EAAQ,K,2IADjC,EAAc,K,QAAzE,SAKK,QAJH,SAAuG,M,8BACvG,SAEM,K,qDAHwF,EAAI,I,mCAAzD,EAAQ,I,2CAAiC,EAAQ,I,kIADjC,EAAc,K,+IAN9DV,GAAY,G,SACZW,GAAoB,GAAK,G,eACzBC,EAA8C,UAAQ,E,iVCDpD,SAASC,IACtB,MAAMxC,GAAQ,QAAmB,gBAEjC,OADKA,GAAO,IAAIyC,MAAM,kDACfzC","sources":["webpack:///./theme/Container.svelte","webpack:///./theme/Drawer.svelte","webpack:///./theme/Nav.svelte","webpack:///./theme/TApp.svelte","webpack:///./src/routes/index.ts","webpack:///./src/App.svelte","webpack:///./theme/IconText.svelte","webpack:///./theme/TStore.ts"],"sourcesContent":["<script lang=\"ts\">\n  import getStore from './TStore';\n  const store = getStore();\n  const store_drawer = store.drawer;\n  const store_mobile = store.mobile;\n</script>\n\n<template>\n  <div class=\"t-container\" class:shrinked={$store_drawer && !$store_mobile}>\n    <slot />\n  </div>\n</template>\n\n<style lang=\"scss\">\n  @use \"./scheme.scss\" as scheme;\n  .t-container {\n    margin-top: scheme.$navSize;\n    transition: margin scheme.$aniDuration ease;\n    &.shrinked {\n      margin-left: scheme.$drawerWidth;\n    }\n  }\n</style>\n","<script lang=\"ts\">\n  import { fade } from 'svelte/transition';\n  import getStore from './TStore';\n  const store = getStore();\n  let store_drawer = store.drawer;\n  let store_mobile = store.mobile;\n</script>\n\n<template>\n  {#if $store_mobile && $store_drawer}\n    <div class=\"drawer-cover\" transition:fade on:click={() => store_drawer.set(false)} />\n  {/if}\n  <div class=\"t-drawer\" class:hidden={!$store_drawer}><slot /></div>\n</template>\n\n<style lang=\"scss\">\n  @use \"./scheme.scss\" as scheme;\n  .t-drawer {\n    position: fixed;\n    top: scheme.$navSize;\n    left: 0px;\n    bottom: 0px;\n    width: scheme.$drawerWidth;\n    box-sizing: border-box;\n    background-color: scheme.$background;\n    box-shadow: 0px 0px 5px scheme.$shadowColor;\n    overflow: auto;\n    padding: 20px 0px 10px 0px;\n\n    font-size: 1.2rem;\n\n    display: flex;\n    flex-direction: column;\n    flex-wrap: nowrap;\n    justify-content: flex-start;\n\n    transition: transform scheme.$aniDuration ease;\n    &.hidden {\n      transform: translateX(-102%);\n    }\n    :global {\n      a {\n        color: scheme.$textOnBackground;\n        width: 100%;\n        box-sizing: border-box;\n        text-decoration: none;\n        padding: 10px;\n        transition: background-color scheme.$aniDuration ease, border scheme.$aniDuration ease;\n\n        &:hover {\n          background-color: scheme.$highlight;\n        }\n        &:active {\n          background-color: scheme.$highlightDark;\n        }\n      }\n      .linkactive {\n        font-weight: bold;\n        border-right: solid 0.3rem scheme.$primaryLight;\n      }\n    }\n  }\n  .drawer-cover {\n    position: fixed;\n    top: scheme.$navSize;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-color: scheme.$coverColor;\n  }\n</style>\n","<script lang=\"ts\">\n  import { slide as trans } from 'svelte/transition';\n  import getStore from './TStore';\n  const store = getStore();\n  let store_drawer = store.drawer;\n  export let loading: boolean = true;\n</script>\n\n<template>\n  {#if loading}\n    <div class=\"t-nav-loading\" transition:trans>\n      <div class=\"line\" />\n      <div class=\"subline inc\" />\n      <div class=\"subline dec\" />\n    </div>\n  {/if}\n  <div class=\"t-nav\">\n    <!-- svelte-ignore a11y-missing-attribute -->\n    <a on:click={() => store_drawer.set(!$store_drawer)} class=\"material-icons\" style=\"font-size:24px;\">menu</a>\n    <slot />\n  </div>\n</template>\n\n<style lang=\"scss\">\n  @use \"./scheme.scss\" as scheme;\n  .t-nav {\n    padding: 0px;\n    position: fixed;\n    top: 0px;\n    left: 0px;\n    right: 0px;\n    width: 100%;\n    box-sizing: border-box;\n    background-color: scheme.$primary;\n    display: flex;\n    box-shadow: 0px 0px 5px scheme.$shadowColor;\n    justify-content: space-between;\n    :global(a),\n    :global(span) {\n      line-height: scheme.$nav1in3;\n      font-size: 1rem;\n      padding: scheme.$nav1in3 15px scheme.$nav1in3 15px;\n      text-decoration: none;\n      color: scheme.$textOnPrimary;\n      transition: background-color scheme.$aniDuration ease;\n      user-select: none;\n      cursor: pointer;\n      &:hover {\n        background-color: scheme.$highlight;\n      }\n    }\n    :global(span) {\n      cursor: default;\n      &:hover {\n        background-color: rgba(0, 0, 0, 0);\n      }\n    }\n  }\n  .t-nav-loading {\n    position: fixed;\n    width: 100%;\n    height: 5px;\n    top: scheme.$navSize;\n    left: 0px;\n    right: 0px;\n    overflow-x: hidden;\n\n    .line {\n      position: absolute;\n      opacity: 0.4;\n      background: scheme.$primary;\n      width: 150%;\n      height: 5px;\n    }\n\n    .subline {\n      position: absolute;\n      background: scheme.$primaryLight;\n      height: 5px;\n    }\n    .inc {\n      animation: increase 2s infinite;\n    }\n    .dec {\n      animation: decrease 2s 0.5s infinite;\n    }\n\n    @keyframes increase {\n      from {\n        left: -5%;\n        width: 5%;\n      }\n      to {\n        left: 130%;\n        width: 100%;\n      }\n    }\n    @keyframes decrease {\n      from {\n        left: -80%;\n        width: 80%;\n      }\n      to {\n        left: 110%;\n        width: 10%;\n      }\n    }\n  }\n</style>\n","<script lang=\"ts\">\n  import { setContext } from 'svelte';\n  import type { TStore } from './TStore';\n  import { Writable, writable } from 'svelte/store';\n  let store: TStore = {\n    mobile: writable(true) as Writable<boolean>,\n    drawer: writable(false) as Writable<boolean>,\n  };\n  const resizeHandler = () => {\n    const isMobile = window.innerWidth < 960;\n    store.mobile.set(isMobile);\n    store.drawer.set(!isMobile);\n  };\n  window.addEventListener('resize', resizeHandler);\n  resizeHandler();\n  setContext('ttheme-store', store);\n</script>\n\n<template>\n  <div class=\"t-app\">\n    <slot />\n  </div>\n</template>\n\n<style lang=\"scss\" global>\n  @use \"./scheme.scss\" as scheme;\n  @import url(https://fonts.googleapis.com/css2?family=Roboto&display=swap);\n  @import url(https://fonts.googleapis.com/icon?family=Material+Icons);\n  @import url(https://fonts.googleapis.com/icon?family=Material+Icons+Outlined);\n  body {\n    font-family: 'Roboto', sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    color: scheme.$textOnBackground;\n    -webkit-tap-highlight-color: transparent;\n  }\n  .t-a-btn {\n    text-decoration: none;\n    color: inherit;\n    display: inline-block;\n    padding: 5px;\n    transition: background-color scheme.$aniDuration ease;\n    &:hover {\n      background-color: scheme.$highlight;\n      box-shadow: 0px 0px 2px scheme.$shadowColor;\n    }\n  }\n  .t-btn {\n    text-decoration: none;\n    color: scheme.$textOnPrimary;\n    transition: background-color scheme.$aniDuration ease;\n    background-color: scheme.$primary;\n    border: none;\n    box-shadow: 0px 0px 0px scheme.$shadowColor;\n    border-radius: 3px;\n    font-size: 1em;\n    padding: 0.7em;\n    &:hover {\n      background-color: scheme.$primaryDark;\n      box-shadow: 0px 0px 2px scheme.$shadowColor;\n    }\n    &:active {\n      background-color: scheme.$primary;\n      box-shadow: 0px 0px 2px scheme.$shadowColor;\n    }\n  }\n  .t-shadow {\n    box-shadow: 0px 0px 2px scheme.$shadowColor;\n    border-radius: 3px;\n  }\n  form {\n    label {\n      display: block;\n      margin-top: 1.5em;\n      padding: 5px;\n      font-size: 1em;\n      &:first-of-type {\n        margin-top: 0;\n      }\n    }\n    input[type='text'],\n    input[type='number'],\n    textarea,\n    select {\n      width: 100%;\n      padding: 10px;\n      box-sizing: border-box;\n      font-size: 1em;\n      border: solid 1px grey;\n      border-radius: 5px;\n      margin: 0px;\n      outline: none;\n      &:focus {\n        box-shadow: 0px 0px 2px grey;\n        &:invalid {\n          border: solid 1px rgb(173, 47, 47);\n        }\n        &:valid {\n          border: solid 1px rgb(76, 173, 47);\n        }\n      }\n    }\n    textarea {\n      resize: none;\n      height: 10em;\n    }\n    input[type='submit'] {\n      display: block;\n      text-align: center;\n      margin: 20px auto;\n      cursor: pointer;\n    }\n    .message {\n      color: rgb(172, 53, 53);\n      padding: 5px;\n      font-size: 0.8em;\n    }\n  }\n</style>\n","import type { SvelteRouterMiddleware, SvelteRouterRoutes } from '@vigneshpa/svelte-router';\n\nconst tree: SvelteRouterRoutes = {\n  dashboard: { component: () => import('./Dashboard.svelte') },\n  clients: {\n    component: () => import('./Clients/Clients.svelte'),\n    routes: {\n      add: { component: () => import('./Clients/Add.svelte') },\n      'info/:client': { component: () => import('./Clients/Info.svelte') },\n    },\n  },\n  about: { component: () => import('./About.svelte') },\n  groups: {\n    component: () => import('./Groups/Groups.svelte'),\n    routes: {\n      add: { component: () => import('./Groups/Add.svelte') },\n    },\n  },\n  backup: { component: () => import('./Backup.svelte') },\n};\nconst middleware: SvelteRouterMiddleware = router => router.on('/', () => router.route('/dashboard'));\nexport default { tree, middleware };\n","<script lang=\"ts\">\n  import Container from '@theme/Container.svelte';\n  import Drawer from '@theme/Drawer.svelte';\n  import IconText from '@theme/IconText.svelte';\n  import Nav from '@theme/Nav.svelte';\n  import TApp from '@theme/TApp.svelte';\n  import { Router } from '@vigneshpa/svelte-router';\n  import routes from '@/routes/';\n  const bURL = window.bURL;\n  let route_loading = window['svelte-router'].isLoading;\n  let drawer_links = [\n    { href: bURL + '/dashboard', text: 'Dashboard', icon: 'space_dashboard', icon_noutlined: false },\n    { href: bURL + '/clients', text: 'Clients', icon: 'people' },\n    { href: bURL + '/groups', text: 'Groups', icon: 'groups' },\n    { href: bURL + '/backup', text: 'Backup', icon: 'settings_backup_restore' },\n    { href: bURL + '/about', text: 'About', icon: 'info' },\n  ];\n  let route_pageStr = window['svelte-router'].pageStr;\n</script>\n\n<template>\n  <TApp>\n    <Container>\n      <Router base={bURL} {...routes} />\n    </Container>\n\n    <Drawer>\n      {#each drawer_links as lnk}\n        <a href={lnk.href} class:linkactive={(bURL + $route_pageStr).startsWith(lnk.href)}>\n          <IconText icon={lnk.icon} outlined={!lnk.icon_noutlined}>{lnk.text}</IconText>\n        </a>\n      {/each}\n    </Drawer>\n\n    <Nav loading={$route_loading}>\n      <span> Chit Management System</span>\n      {#if !window.useLocalCore}\n        <a href=\"/api/logout\"> Logout </a>\n      {/if}\n    </Nav>\n  </TApp>\n</template>\n","<script lang=\"ts\">\n  export let icon: string;\n  export let outlined: boolean = false;\n  export let justifyContent: 'left' | 'right' | 'center' = 'center';\n</script>\n\n<template>\n  <div class=\"t-icon-text-container\" style=\"justify-content:{justifyContent}\">\n    <i class=\"t-icon\" class:material-icons={!outlined} class:material-icons-outlined={outlined}> {icon} </i>\n    <span class=\"t-icon-text\">\n      <slot />\n    </span>\n  </div>\n</template>\n\n<style lang=\"scss\">\n  @use \"./scheme.scss\" as scheme;\n  .t-icon-text-container {\n    .t-icon {\n      display: inline-block;\n      width: 24px;\n      height: 24px;\n      color: scheme.$textOnBackgroundLight;\n      margin-right: 10px;\n      margin-left: 10px;\n      overflow: hidden;\n    }\n    .t-icon-text {\n      display: inline-block;\n      text-decoration: none;\n      padding-right: 10px;\n    }\n    display: flex;\n    align-items: center;\n  }\n</style>\n","import { getContext } from 'svelte';\nimport type { Writable } from 'svelte/store';\nexport default function getStore() {\n  const store = getContext<TStore>('ttheme-store');\n  if (!store) new Error('Please use this component within app component');\n  return store;\n}\nexport type TStore = {\n  mobile: Writable<boolean>;\n  drawer: Writable<boolean>;\n};\n"],"names":["store","store_drawer","drawer","store_mobile","mobile","set","loading","$store_drawer","resizeHandler","isMobile","window","innerWidth","addEventListener","tree","dashboard","component","clients","routes","add","about","groups","backup","middleware","router","on","route","text","icon","icon_noutlined","href","startsWith","useLocalCore","bURL","route_loading","isLoading","drawer_links","route_pageStr","pageStr","outlined","justifyContent","getStore","Error"],"sourceRoot":""}