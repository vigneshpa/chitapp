{"version":3,"file":"js/891.js","mappings":"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","sources":["webpack:///../node_modules/comlink/dist/esm/comlink.mjs"],"sourcesContent":["/**\r\n * Copyright 2019 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst proxyMarker = Symbol(\"Comlink.proxy\");\r\nconst createEndpoint = Symbol(\"Comlink.endpoint\");\r\nconst releaseProxy = Symbol(\"Comlink.releaseProxy\");\r\nconst throwMarker = Symbol(\"Comlink.thrown\");\r\nconst isObject = (val) => (typeof val === \"object\" && val !== null) || typeof val === \"function\";\r\n/**\r\n * Internal transfer handle to handle objects marked to proxy.\r\n */\r\nconst proxyTransferHandler = {\r\n    canHandle: (val) => isObject(val) && val[proxyMarker],\r\n    serialize(obj) {\r\n        const { port1, port2 } = new MessageChannel();\r\n        expose(obj, port1);\r\n        return [port2, [port2]];\r\n    },\r\n    deserialize(port) {\r\n        port.start();\r\n        return wrap(port);\r\n    },\r\n};\r\n/**\r\n * Internal transfer handler to handle thrown exceptions.\r\n */\r\nconst throwTransferHandler = {\r\n    canHandle: (value) => isObject(value) && throwMarker in value,\r\n    serialize({ value }) {\r\n        let serialized;\r\n        if (value instanceof Error) {\r\n            serialized = {\r\n                isError: true,\r\n                value: {\r\n                    message: value.message,\r\n                    name: value.name,\r\n                    stack: value.stack,\r\n                },\r\n            };\r\n        }\r\n        else {\r\n            serialized = { isError: false, value };\r\n        }\r\n        return [serialized, []];\r\n    },\r\n    deserialize(serialized) {\r\n        if (serialized.isError) {\r\n            throw Object.assign(new Error(serialized.value.message), serialized.value);\r\n        }\r\n        throw serialized.value;\r\n    },\r\n};\r\n/**\r\n * Allows customizing the serialization of certain values.\r\n */\r\nconst transferHandlers = new Map([\r\n    [\"proxy\", proxyTransferHandler],\r\n    [\"throw\", throwTransferHandler],\r\n]);\r\nfunction expose(obj, ep = self) {\r\n    ep.addEventListener(\"message\", function callback(ev) {\r\n        if (!ev || !ev.data) {\r\n            return;\r\n        }\r\n        const { id, type, path } = Object.assign({ path: [] }, ev.data);\r\n        const argumentList = (ev.data.argumentList || []).map(fromWireValue);\r\n        let returnValue;\r\n        try {\r\n            const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);\r\n            const rawValue = path.reduce((obj, prop) => obj[prop], obj);\r\n            switch (type) {\r\n                case \"GET\" /* GET */:\r\n                    {\r\n                        returnValue = rawValue;\r\n                    }\r\n                    break;\r\n                case \"SET\" /* SET */:\r\n                    {\r\n                        parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);\r\n                        returnValue = true;\r\n                    }\r\n                    break;\r\n                case \"APPLY\" /* APPLY */:\r\n                    {\r\n                        returnValue = rawValue.apply(parent, argumentList);\r\n                    }\r\n                    break;\r\n                case \"CONSTRUCT\" /* CONSTRUCT */:\r\n                    {\r\n                        const value = new rawValue(...argumentList);\r\n                        returnValue = proxy(value);\r\n                    }\r\n                    break;\r\n                case \"ENDPOINT\" /* ENDPOINT */:\r\n                    {\r\n                        const { port1, port2 } = new MessageChannel();\r\n                        expose(obj, port2);\r\n                        returnValue = transfer(port1, [port1]);\r\n                    }\r\n                    break;\r\n                case \"RELEASE\" /* RELEASE */:\r\n                    {\r\n                        returnValue = undefined;\r\n                    }\r\n                    break;\r\n                default:\r\n                    return;\r\n            }\r\n        }\r\n        catch (value) {\r\n            returnValue = { value, [throwMarker]: 0 };\r\n        }\r\n        Promise.resolve(returnValue)\r\n            .catch((value) => {\r\n            return { value, [throwMarker]: 0 };\r\n        })\r\n            .then((returnValue) => {\r\n            const [wireValue, transferables] = toWireValue(returnValue);\r\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);\r\n            if (type === \"RELEASE\" /* RELEASE */) {\r\n                // detach and deactive after sending release response above.\r\n                ep.removeEventListener(\"message\", callback);\r\n                closeEndPoint(ep);\r\n            }\r\n        });\r\n    });\r\n    if (ep.start) {\r\n        ep.start();\r\n    }\r\n}\r\nfunction isMessagePort(endpoint) {\r\n    return endpoint.constructor.name === \"MessagePort\";\r\n}\r\nfunction closeEndPoint(endpoint) {\r\n    if (isMessagePort(endpoint))\r\n        endpoint.close();\r\n}\r\nfunction wrap(ep, target) {\r\n    return createProxy(ep, [], target);\r\n}\r\nfunction throwIfProxyReleased(isReleased) {\r\n    if (isReleased) {\r\n        throw new Error(\"Proxy has been released and is not useable\");\r\n    }\r\n}\r\nfunction createProxy(ep, path = [], target = function () { }) {\r\n    let isProxyReleased = false;\r\n    const proxy = new Proxy(target, {\r\n        get(_target, prop) {\r\n            throwIfProxyReleased(isProxyReleased);\r\n            if (prop === releaseProxy) {\r\n                return () => {\r\n                    return requestResponseMessage(ep, {\r\n                        type: \"RELEASE\" /* RELEASE */,\r\n                        path: path.map((p) => p.toString()),\r\n                    }).then(() => {\r\n                        closeEndPoint(ep);\r\n                        isProxyReleased = true;\r\n                    });\r\n                };\r\n            }\r\n            if (prop === \"then\") {\r\n                if (path.length === 0) {\r\n                    return { then: () => proxy };\r\n                }\r\n                const r = requestResponseMessage(ep, {\r\n                    type: \"GET\" /* GET */,\r\n                    path: path.map((p) => p.toString()),\r\n                }).then(fromWireValue);\r\n                return r.then.bind(r);\r\n            }\r\n            return createProxy(ep, [...path, prop]);\r\n        },\r\n        set(_target, prop, rawValue) {\r\n            throwIfProxyReleased(isProxyReleased);\r\n            // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\r\n            // boolean. To show good will, we return true asynchronously ¯\\_(ツ)_/¯\r\n            const [value, transferables] = toWireValue(rawValue);\r\n            return requestResponseMessage(ep, {\r\n                type: \"SET\" /* SET */,\r\n                path: [...path, prop].map((p) => p.toString()),\r\n                value,\r\n            }, transferables).then(fromWireValue);\r\n        },\r\n        apply(_target, _thisArg, rawArgumentList) {\r\n            throwIfProxyReleased(isProxyReleased);\r\n            const last = path[path.length - 1];\r\n            if (last === createEndpoint) {\r\n                return requestResponseMessage(ep, {\r\n                    type: \"ENDPOINT\" /* ENDPOINT */,\r\n                }).then(fromWireValue);\r\n            }\r\n            // We just pretend that `bind()` didn’t happen.\r\n            if (last === \"bind\") {\r\n                return createProxy(ep, path.slice(0, -1));\r\n            }\r\n            const [argumentList, transferables] = processArguments(rawArgumentList);\r\n            return requestResponseMessage(ep, {\r\n                type: \"APPLY\" /* APPLY */,\r\n                path: path.map((p) => p.toString()),\r\n                argumentList,\r\n            }, transferables).then(fromWireValue);\r\n        },\r\n        construct(_target, rawArgumentList) {\r\n            throwIfProxyReleased(isProxyReleased);\r\n            const [argumentList, transferables] = processArguments(rawArgumentList);\r\n            return requestResponseMessage(ep, {\r\n                type: \"CONSTRUCT\" /* CONSTRUCT */,\r\n                path: path.map((p) => p.toString()),\r\n                argumentList,\r\n            }, transferables).then(fromWireValue);\r\n        },\r\n    });\r\n    return proxy;\r\n}\r\nfunction myFlat(arr) {\r\n    return Array.prototype.concat.apply([], arr);\r\n}\r\nfunction processArguments(argumentList) {\r\n    const processed = argumentList.map(toWireValue);\r\n    return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];\r\n}\r\nconst transferCache = new WeakMap();\r\nfunction transfer(obj, transfers) {\r\n    transferCache.set(obj, transfers);\r\n    return obj;\r\n}\r\nfunction proxy(obj) {\r\n    return Object.assign(obj, { [proxyMarker]: true });\r\n}\r\nfunction windowEndpoint(w, context = self, targetOrigin = \"*\") {\r\n    return {\r\n        postMessage: (msg, transferables) => w.postMessage(msg, targetOrigin, transferables),\r\n        addEventListener: context.addEventListener.bind(context),\r\n        removeEventListener: context.removeEventListener.bind(context),\r\n    };\r\n}\r\nfunction toWireValue(value) {\r\n    for (const [name, handler] of transferHandlers) {\r\n        if (handler.canHandle(value)) {\r\n            const [serializedValue, transferables] = handler.serialize(value);\r\n            return [\r\n                {\r\n                    type: \"HANDLER\" /* HANDLER */,\r\n                    name,\r\n                    value: serializedValue,\r\n                },\r\n                transferables,\r\n            ];\r\n        }\r\n    }\r\n    return [\r\n        {\r\n            type: \"RAW\" /* RAW */,\r\n            value,\r\n        },\r\n        transferCache.get(value) || [],\r\n    ];\r\n}\r\nfunction fromWireValue(value) {\r\n    switch (value.type) {\r\n        case \"HANDLER\" /* HANDLER */:\r\n            return transferHandlers.get(value.name).deserialize(value.value);\r\n        case \"RAW\" /* RAW */:\r\n            return value.value;\r\n    }\r\n}\r\nfunction requestResponseMessage(ep, msg, transfers) {\r\n    return new Promise((resolve) => {\r\n        const id = generateUUID();\r\n        ep.addEventListener(\"message\", function l(ev) {\r\n            if (!ev.data || !ev.data.id || ev.data.id !== id) {\r\n                return;\r\n            }\r\n            ep.removeEventListener(\"message\", l);\r\n            resolve(ev.data);\r\n        });\r\n        if (ep.start) {\r\n            ep.start();\r\n        }\r\n        ep.postMessage(Object.assign({ id }, msg), transfers);\r\n    });\r\n}\r\nfunction generateUUID() {\r\n    return new Array(4)\r\n        .fill(0)\r\n        .map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16))\r\n        .join(\"-\");\r\n}\n\nexport { createEndpoint, expose, proxy, proxyMarker, releaseProxy, transfer, transferHandlers, windowEndpoint, wrap };\n//# sourceMappingURL=comlink.mjs.map\n"],"names":["proxyMarker","Symbol","createEndpoint","releaseProxy","throwMarker","isObject","val","transferHandlers","Map","canHandle","serialize","obj","port1","port2","MessageChannel","expose","deserialize","port","start","wrap","value","serialized","Error","isError","message","name","stack","Object","assign","ep","self","addEventListener","callback","ev","data","id","type","path","argumentList","map","fromWireValue","returnValue","parent","slice","reduce","prop","rawValue","apply","proxy","transfer","undefined","Promise","resolve","catch","then","wireValue","transferables","toWireValue","postMessage","removeEventListener","closeEndPoint","endpoint","constructor","isMessagePort","close","target","createProxy","throwIfProxyReleased","isReleased","isProxyReleased","Proxy","get","_target","requestResponseMessage","p","toString","length","r","bind","set","_thisArg","rawArgumentList","last","processArguments","construct","processed","v","arr","Array","prototype","concat","transferCache","WeakMap","transfers","windowEndpoint","w","context","targetOrigin","msg","handler","serializedValue","fill","Math","floor","random","Number","MAX_SAFE_INTEGER","join","l"],"sourceRoot":""}