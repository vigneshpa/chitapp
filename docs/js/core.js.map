{"version":3,"file":"js/core.js","mappings":"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","sources":["webpack:///../core/src/Actions/checkPhone.ts","webpack:///../core/src/utils.ts","webpack:///../core/src/Entites/Model.ts","webpack:///../core/src/Entites/Group.ts","webpack:///../core/src/Entites/Client.ts","webpack:///../core/src/Entites/Chit.ts","webpack:///../core/src/Entites/Payment.ts","webpack:///../core/src/Actions/createChit.ts","webpack:///../core/src/Actions/createGroup.ts","webpack:///../core/src/Actions/createClient.ts","webpack:///../core/src/Actions/findChits.ts","webpack:///../core/src/Actions/findGroups.ts","webpack:///../core/src/Actions/findClients.ts","webpack:///../core/src/Actions/checkGroup.ts","webpack:///../core/src/index.ts","webpack:///../core/src/Actions/index.ts","webpack:///./src/Core.ts"],"sourcesContent":["import type Repos from '../Entites';\n\nexport default function makeCheckPhone(repos: Repos) {\n  return async function checkPhone({ phone }: { phone: string }) {\n    // Checking existance\n    let count = await repos.Client.findOne({ phone });\n    return count?.name || false;\n  };\n}\n","\nexport function isFiniteUnSignInteger(num:number){\n  return Number.isSafeInteger(num) && Number.isFinite(num) && num >= 0;\n}","import { PrimaryGeneratedColumn, Column, CreateDateColumn, UpdateDateColumn, BeforeInsert, Entity } from 'typeorm';\nimport { v4 } from 'uuid';\n\n@Entity()\nexport default abstract class Model {\n  @PrimaryGeneratedColumn()\n  private id!: number;\n\n  @Column({ type: 'uuid', unique: true })\n  readonly uuid: string;\n\n  @CreateDateColumn()\n  readonly createdAt!: Date;\n\n  @UpdateDateColumn()\n  readonly updatedAt!: Date;\n\n  constructor(uuid?:string) {\n    this.uuid = uuid || v4();\n  }\n\n}\n","import { Entity, Column, OneToMany, BeforeInsert } from 'typeorm';\nimport Chit from './Chit';\nimport Model from './Model';\nimport type { RangeOf2 } from '../vendorTypes';\n\n@Entity()\nexport default class Group extends Model {\n  @Column({ unique: true })\n  name!: string;\n\n  @Column({ nullable: false })\n  batch!: string;\n\n  @Column('integer')\n  month!: RangeOf2<1, 12>;\n\n  @Column({ nullable: false })\n  year!: number;\n\n  @Column({ nullable: false, type: 'integer' })\n  totalValue!: number;\n\n  @Column({ nullable: false })\n  isActive: boolean = false;\n\n  @OneToMany(type => Chit, Chit => Chit.group, { cascade: true })\n  chits!: Chit[];\n\n  /**\n   * This method tests all the chits and activates\n   * the group if conditions are satisfied\n   *\n   * Warning: Once activated it cannot be modified\n   */\n  activate() {\n    // Vaidating totsum of all chits value\n    if (this.isActive) throw new Error('Group is already active');\n    let chitsTotalValue = 0;\n    this.chits.forEach(chit => {\n      chitsTotalValue += chit.value;\n    });\n    if (chitsTotalValue < this.totalValue) throw new Error('Chits are not sufficient');\n    if (chitsTotalValue > this.totalValue) throw new Error('Chits are more than the limit');\n    (this.isActive as boolean) = true;\n  }\n}\n","import { Entity, Column, OneToMany } from 'typeorm';\nimport Chit from './Chit';\nimport Model from './Model';\n\n@Entity()\nexport default class Client extends Model {\n  @Column()\n  name!: string;\n\n  @Column()\n  phone!: string;\n\n  @Column()\n  address!: string;\n\n  @OneToMany(type => Chit, Chit => Chit.client)\n  chits!: Chit[];\n}\n","import { Entity, JoinColumn, ManyToOne, Column, OneToMany } from 'typeorm';\nimport Payment from './Payment';\nimport Group from './Group';\nimport Client from './Client';\nimport Model from './Model';\nimport type { RangeOf2 } from '../vendorTypes';\n\n@Entity()\nexport default class Chit extends Model {\n  @JoinColumn()\n  @ManyToOne(type => Client, Client => Client.chits)\n  client!: Client;\n\n  @JoinColumn()\n  @ManyToOne(type => Group, Group => Group.chits)\n  group!: Group;\n\n  @Column({ nullable: false, type: 'integer' })\n  value!: number;\n\n  @OneToMany(type => Payment, Payment => Payment.chit, { cascade: true })\n  payments!: Payment[];\n\n  @Column({ type: 'integer', nullable: true })\n  wonAtMonth: RangeOf2<1, 20> | null = null;\n}\n","import type { RangeOf2 } from '../vendorTypes';\nimport { Entity, ManyToOne, JoinColumn, Column } from 'typeorm';\nimport Chit from './Chit';\nimport Model from './Model';\n\n@Entity()\nexport default class Payment extends Model {\n  @JoinColumn()\n  @ManyToOne(type => Chit, Chit => Chit.payments)\n  chit!: Chit;\n\n  @Column('integer', { nullable: false })\n  imonth!: RangeOf2<1, 20>;\n\n  @Column({ nullable: false })\n  ispaid!: boolean;\n\n  get toBePaid(): number {\n    let base = this.chit.value / 20;\n    const intrest = base / 5;\n\n    // Adding interest if the chit is won before this payment\n    if (this.chit.wonAtMonth && this.chit.wonAtMonth < this.imonth) base += intrest;\n    return base;\n  }\n}\n","import { isFiniteUnSignInteger } from '../utils';\nimport Repos, { Chit, Payment } from '../Entites';\n\nexport default function makeCreateChit(repos: Repos) {\n  return async function createChit({ clientUuid, groupUuid, value }: { clientUuid: string; groupUuid: string; value: number }) {\n    // getting client object\n    const client = await repos.Client.findOne({ uuid: clientUuid });\n    if (!client) throw new Error('Client does not exists');\n\n    // getting group object\n    const group = await repos.Group.findOne({ uuid: groupUuid });\n    if (!group) throw new Error('Group does not exists');\n    if (group.isActive) throw new Error('Cannot add chit to an active group');\n\n    // Validating value\n    if (!isFiniteUnSignInteger(value)) throw new Error('Value of an chit is not valid');\n\n    //Creating chit object\n    let chit = new Chit();\n\n    // Asigning props\n    chit.client = client;\n    chit.group = group;\n    chit.value = value;\n    chit.wonAtMonth = null;\n    chit.payments = [];\n\n    // Creating Payments\n    for (let imonth = 1; imonth <= 20; imonth++) {\n      // Creating payment object\n      const payment = new Payment();\n\n      // Asigning props\n      payment.chit = chit;\n      payment.imonth = imonth as any;\n      payment.ispaid = false;\n\n      // Pushing payment\n      chit.payments.push(payment);\n    }\n\n    // Creating chit\n    chit = await repos.Chit.save(chit);\n\n    return Object.freeze(chit);\n  };\n}\n","import { isFiniteUnSignInteger } from '../utils';\nimport type { RangeOf2 } from '../vendorTypes';\nimport Repos, { Group } from '../Entites';\n\nexport default function makeCreateGroup(repos: Repos) {\n  return async function createGroup({ year, month, batch, totalValue }: { year: number; month: RangeOf2<1, 12>; batch: string; totalValue: number }) {\n    // Validating\n    if (!isFiniteUnSignInteger(year)) throw new Error('Year is not valid');\n    if (!isFiniteUnSignInteger(month)) throw new Error('Month is not valid');\n    if (batch.length > 3) throw new Error('Batch cannot be longer than 3');\n    if (!isFiniteUnSignInteger(totalValue)) throw new Error('Specified total value is not valid');\n\n    // Checking existance of the group\n    let count = await repos.Group.count({ year, month, batch });\n    if (count > 0) throw new Error('Group already exists');\n\n    // Creating Group Object\n    let group = new Group();\n\n    // Assigning props\n    group.year = year;\n    group.month = month;\n    group.batch = batch;\n    group.totalValue = totalValue;\n    group.isActive = false;\n    group.chits = [];\n\n    // Auto generated\n    group.name = year + '-' + month + '-' + batch;\n\n    // Saving group\n    group = await repos.Group.save(group);\n\n    return Object.freeze(group);\n  };\n}\n","import { Client } from '../Entites';\nimport type Repos from '../Entites';\n\nexport default function makeCreateClient(repos: Repos) {\n  return async function createClient({ name, phone, address }: { name: string; phone: string; address: string }) {\n    // Validating\n    if (name.length < 3) throw new Error('Name must be longer than 2 characters');\n    if (phone.length < 10) throw new Error('Phone number must be longer than 10 characters');\n    if (address.length < 5) throw new Error('Address must be longer than 5 characters');\n\n    // Checking existance of the client\n    let count = await repos.Client.count({ phone });\n    if (count > 0) throw new Error('Client with same phone number already exists');\n\n    // Creating Client object\n    let client = new Client();\n\n    // Assigning properties\n    client.name = name;\n    client.phone = phone;\n    client.address = address;\n    client.chits = [];\n\n    // Saving client\n    client = await repos.Client.save(client);\n\n    return Object.freeze(client);\n  };\n}\n","import { isFiniteUnSignInteger } from '../utils';\nimport type Repos from '../Entites';\n\nexport default function makeFindChits(repos: Repos) {\n  return async function findChits({ clientUuid, groupUuid, value }: { clientUuid?: string; groupUuid?: string; value?: number }) {\n    // getting client object\n    const client = clientUuid ? await repos.Client.findOne({ uuid: clientUuid }) : undefined;\n\n    // getting group object\n    const group = groupUuid ? await repos.Group.findOne({ uuid: groupUuid }) : undefined;\n\n    // Validating value\n    if (value && !isFiniteUnSignInteger(value)) throw new Error('Value of an chit is not valid');\n\n    const chits = repos.Chit.find({ client, group, value });\n\n    return Object.freeze(chits);\n  };\n}\n","import { isFiniteUnSignInteger } from '../utils';\nimport type { RangeOf2 } from '../vendorTypes';\nimport type { Group } from '../Entites';\nimport type Repos from '../Entites';\n\nexport default function makeFindGroups(repos: Repos) {\n  return async function findGroups(params: { partial: Partial<Group> }) {\n    if (!(params && params.partial)) return Object.freeze(await repos.Group.find());\n\n    // Validating\n    if (params.partial.year && !isFiniteUnSignInteger(params.partial.year)) throw new Error('Year is not valid');\n    if (params.partial.month && !isFiniteUnSignInteger(params.partial.month)) throw new Error('Month is not valid');\n    if (params.partial.batch && params.partial.batch.length > 3) throw new Error('Batch cannot be longer than 3');\n    if (params.partial.totalValue && !isFiniteUnSignInteger(params.partial.totalValue)) throw new Error('Specified total value is not valid');\n\n    // Searching for groups\n    let groups = await repos.Group.find({ where: params.partial });\n\n    return Object.freeze(groups);\n  };\n}\n","import type { Client } from '../Entites';\nimport type Repos from '../Entites';\n\nexport default function makeFindClients(repos: Repos) {\n  return async function findClients(params?: { partial: Partial<Client> }) {\n    if (!(params && params.partial)) return Object.freeze(await repos.Client.find());\n\n    // Validating\n    if (params.partial.name && params.partial.name.length < 3) throw new Error('Name must be longer than 2 characters');\n    if (params.partial.phone && params.partial.phone.length < 10) throw new Error('Phone number must be longer than 10 characters');\n    if (params.partial.address && params.partial.address.length < 5) throw new Error('Address must be longer than 5 characters');\n\n    // Searching for the clientrs\n    const clients = await repos.Client.find({ where: params.partial });\n\n    return Object.freeze(clients);\n  };\n}\n","import type Repos from '../Entites';\n\nexport default function makeCheckGroup(repos: Repos) {\n  return async function checkGroup({ name }: { name: string }) {\n    // Checking existance\n    let count = await repos.Group.findOne({ name });\n    return !!count;\n  };\n}\n","import 'reflect-metadata';\nimport { createConnection } from 'typeorm';\nimport type { EntityManager, ConnectionOptions, Connection } from 'typeorm';\nimport type { Actions } from './Actions';\nimport makeActions from './Actions';\nimport * as Entites from './Entites';\n\nexport type { Actions };\nexport default class Core {\n  connection?: Connection;\n  isConnected: boolean = false;\n  actions?: Actions;\n  query?: EntityManager['query'];\n\n  async connect(options: ConnectionOptions) {\n    if (this.isConnected) throw new Error('This instance is already connected');\n    this.connection = await createConnection({ ...options, entities: Object.values(Entites), synchronize: true });\n    this.isConnected = true;\n    this.loadActions();\n    this.connection.manager.query;\n  }\n  async close() {\n    if (!this.isConnected || !this.connection) return console.error(new Error('Connection is already closed'));\n    await this.connection.close();\n    this.isConnected = false;\n  }\n  loadActions() {\n    if (!this.connection) throw new Error('Cannot load actions as the instance is not connected');\n    const repos: any = {};\n    for (const key in Entites) {\n      if (Object.prototype.hasOwnProperty.call(Entites, key)) {\n        const Entity = (<any>Entites)[key];\n        repos[key] = this.connection.getRepository(Entity);\n      }\n    }\n    this.actions = makeActions(repos);\n  }\n}\n","import type Repos from '../Entites';\nimport makeCheckPhone from './checkPhone';\nimport makeCreateChit from './createChit';\nimport makeCreateGroup from './createGroup';\nimport makeCreateClient from './createClient';\nimport makeFindChits from './findChits';\nimport makeFindGroups from './findGroups';\nimport makeFindClients from './findClients';\nimport makeCheckGroup from './checkGroup';\n\nexport default function makeActions(repos: Repos) {\n  return {\n    /**\n     * checks for existance of a phone number\n     * @param {Object} params parameters to check phone\n     * @param {string} params.phone Phone number\n     * @returns {string} weather phone number exists\n     */\n    checkPhone: makeCheckPhone(repos),\n    /**\n     * checks for existance of a group\n     * @param {Object} params parameters to check group\n     * @param {string} params.name name of the group\n     * @returns {boolean} weather group exists\n     */\n    checkGroup: makeCheckGroup(repos),\n    /**\n     * Creates a new Chit\n     * @param {Object} params parameters to create Chit\n     * @param {string} params.client uuid of client to assign this chit to\n     * @param {string} params.group uuid of Group this chit belongs to and Group must not be active\n     * @param {number} params.value Value of this chit in Rupees; It must be an integer\n     * @returns created chit\n     */\n    createChit: makeCreateChit(repos),\n    /**\n     * Creates a new Group\n     * @param {Object} params parameters to create Group\n     * @param {number} params.year Year in number\n     * @param {number} params.month Month of the year\n     * @param {string} params.batch Batch of the month\n     * @param {number} params.totalValue Total value of the batch\n     * @returns created group\n     */\n    createGroup: makeCreateGroup(repos),\n    /**\n     * Creates a new Client\n     * @param {Object} params parameters to create group\n     * @param {string} params.name Name of the client\n     * @param {string} params.phone Phone number of the client\n     * @param {string} params.address Address of the client\n     * @returns created client\n     */\n    createClient: makeCreateClient(repos),\n    /**\n     * Searches and Lists all the Clients\n     * @param {Object} params params object\n     * @param params.partial partial object of client\n     */\n    findClients: makeFindClients(repos),\n    /**\n     * Finds all the groups whith params\n     * @param {Object} params params object\n     * @param params.partial partial object of group\n     */\n    findGroups: makeFindGroups(repos),\n    /**\n     * Finds all chits\n     * @param {Object} params params object\n     * @param params.partial partial object of chit\n     */\n    findChits: makeFindChits(repos),\n  };\n}\nexport type Actions = ReturnType<typeof makeActions>;\n","import Core from '../../core/src';\nexport type { Actions } from '../../core/src';\nimport initSqlJs, { SqlJsStatic } from 'sql.js';\nimport sqlWasm from 'sql.js/dist/sql-wasm.wasm';\nimport * as localforage from 'localforage';\n\nlocalforage.config({\n  name: 'chitDataStore',\n  storeName: 'chitDataStore',\n});\n\nexport async function initCore(dbName: string = 'chitDatabase') {\n  // Loading SqlJs\n  if (!window.SQL) window.SQL = await initSqlJs({ locateFile: () => sqlWasm });\n  // Mounting localforage\n  window.localforage = localforage;\n\n  const database = (await localforage.getItem<Uint8Array>(dbName)) ?? undefined;\n\n  const core = new Core();\n  await core.connect({\n    type: 'sqljs',\n    database,\n    autoSave: true,\n    logging: process.env.NODE_ENV !== 'production',\n    autoSaveCallback(ary: Uint8Array) {\n      localforage.setItem(dbName, ary);\n    },\n  });\n  return core;\n}\nexport async function getDatabaseBackup(database: string = 'chitDatabase'): Promise<File> {\n  const ary = await localforage.getItem<Uint8Array>(database);\n  if (!ary) throw new Error('Database file does not exists');\n  return new File([ary], 'backup.sqlite', { type: 'application/vnd.sqlite3', lastModified: Date.now() });\n}\nexport async function restoreDatabase(databaseBackup: File, database: string = 'chitDatabase') {\n  await localforage.setItem(database, new Int8Array(await readFile(databaseBackup)));\n  window.location.reload();\n}\nwindow.initCore = initCore;\nexport type CoreClass = Core;\ndeclare global {\n  interface Window {\n    initCore: typeof initCore;\n    SQL: SqlJsStatic;\n    useLocalCore: true | undefined;\n    localforage: typeof localforage;\n  }\n}\nfunction readFile(file: File): Promise<ArrayBuffer> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.addEventListener('loadend', e => resolve((e as any).target.result));\n    reader.addEventListener('error', reject);\n    reader.readAsArrayBuffer(file);\n  });\n}\n"],"names":["makeCheckPhone","repos","async","phone","Client","findOne","name","isFiniteUnSignInteger","num","Number","isSafeInteger","isFinite","Model","constructor","uuid","this","v4","type","unique","Date","Group","isActive","activate","Error","chitsTotalValue","chits","forEach","chit","value","totalValue","nullable","Chit","group","cascade","client","wonAtMonth","Payment","base","intrest","imonth","payments","makeCreateChit","clientUuid","groupUuid","payment","ispaid","push","save","Object","freeze","makeCreateGroup","year","month","batch","length","count","makeCreateClient","address","makeFindChits","undefined","find","makeFindGroups","params","partial","groups","where","makeFindClients","clients","makeCheckGroup","Core","isConnected","options","connection","entities","values","synchronize","loadActions","manager","query","console","error","close","key","prototype","hasOwnProperty","call","Entity","getRepository","actions","checkPhone","checkGroup","createChit","createGroup","createClient","findClients","findGroups","findChits","makeActions","initCore","dbName","window","SQL","locateFile","localforage","database","getItem","core","connect","autoSave","logging","autoSaveCallback","ary","setItem","getDatabaseBackup","File","lastModified","now","restoreDatabase","databaseBackup","file","Int8Array","Promise","resolve","reject","reader","FileReader","addEventListener","e","target","result","readAsArrayBuffer","location","reload","config","storeName"],"sourceRoot":""}